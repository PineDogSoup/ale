//*
// AElf Standards ACS0(Contract Deployment Standard)
//
// Used to manage the deployment and update of contracts.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: acs0.proto

package client

import (
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"

	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The serial number of the contract.
	SerialNumber int64 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The author of the contract, this is the person who deployed the contract.
	Author *Address `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// The category of contract code(0: C#).
	Category int32 `protobuf:"zigzag32,3,opt,name=category,proto3" json:"category,omitempty"`
	// The hash of the contract code.
	CodeHash *Hash `protobuf:"bytes,4,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	// Whether it is a system contract.
	IsSystemContract bool `protobuf:"varint,5,opt,name=is_system_contract,json=isSystemContract,proto3" json:"is_system_contract,omitempty"`
	// The version of the current contract.
	Version         int32  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	ContractVersion string `protobuf:"bytes,7,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// Indicates if the contract is the user contract.
	IsUserContract bool `protobuf:"varint,8,opt,name=is_user_contract,json=isUserContract,proto3" json:"is_user_contract,omitempty"`
}

func (x *ContractInfo) Reset() {
	*x = ContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInfo) ProtoMessage() {}

func (x *ContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInfo.ProtoReflect.Descriptor instead.
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{0}
}

func (x *ContractInfo) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *ContractInfo) GetAuthor() *Address {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ContractInfo) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ContractInfo) GetCodeHash() *Hash {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *ContractInfo) GetIsSystemContract() bool {
	if x != nil {
		return x.IsSystemContract
	}
	return false
}

func (x *ContractInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ContractInfo) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

func (x *ContractInfo) GetIsUserContract() bool {
	if x != nil {
		return x.IsUserContract
	}
	return false
}

type ContractDeploymentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category of contract code(0: C#).
	Category int32 `protobuf:"zigzag32,1,opt,name=category,proto3" json:"category,omitempty"`
	// The byte array of the contract code.
	Code []byte `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ContractDeploymentInput) Reset() {
	*x = ContractDeploymentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractDeploymentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDeploymentInput) ProtoMessage() {}

func (x *ContractDeploymentInput) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDeploymentInput.ProtoReflect.Descriptor instead.
func (*ContractDeploymentInput) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{1}
}

func (x *ContractDeploymentInput) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ContractDeploymentInput) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type SystemContractDeploymentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category of contract code(0: C#).
	Category int32 `protobuf:"zigzag32,1,opt,name=category,proto3" json:"category,omitempty"`
	// The byte array of the contract code.
	Code []byte `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// The name of the contract. It has to be unique.
	Name *Hash `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// An initial list of transactions for the system contract,
	// which is executed in sequence when the contract is deployed.
	TransactionMethodCallList *SystemContractDeploymentInput_SystemTransactionMethodCallList `protobuf:"bytes,4,opt,name=transaction_method_call_list,json=transactionMethodCallList,proto3" json:"transaction_method_call_list,omitempty"`
}

func (x *SystemContractDeploymentInput) Reset() {
	*x = SystemContractDeploymentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemContractDeploymentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemContractDeploymentInput) ProtoMessage() {}

func (x *SystemContractDeploymentInput) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemContractDeploymentInput.ProtoReflect.Descriptor instead.
func (*SystemContractDeploymentInput) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{2}
}

func (x *SystemContractDeploymentInput) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *SystemContractDeploymentInput) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SystemContractDeploymentInput) GetName() *Hash {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SystemContractDeploymentInput) GetTransactionMethodCallList() *SystemContractDeploymentInput_SystemTransactionMethodCallList {
	if x != nil {
		return x.TransactionMethodCallList
	}
	return nil
}

type ContractUpdateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contract address that needs to be updated.
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The byte array of the new contract code.
	Code []byte `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ContractUpdateInput) Reset() {
	*x = ContractUpdateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractUpdateInput) ProtoMessage() {}

func (x *ContractUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractUpdateInput.ProtoReflect.Descriptor instead.
func (*ContractUpdateInput) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{3}
}

func (x *ContractUpdateInput) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ContractUpdateInput) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type ContractCodeCheckInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The byte array of the contract code to be checked.
	ContractInput []byte `protobuf:"bytes,1,opt,name=contract_input,json=contractInput,proto3" json:"contract_input,omitempty"`
	// Whether the input contract is to be deployed or updated.
	IsContractDeployment bool `protobuf:"varint,2,opt,name=is_contract_deployment,json=isContractDeployment,proto3" json:"is_contract_deployment,omitempty"`
	// Method to call after code check complete(DeploySmartContract or UpdateSmartContract).
	CodeCheckReleaseMethod string `protobuf:"bytes,3,opt,name=code_check_release_method,json=codeCheckReleaseMethod,proto3" json:"code_check_release_method,omitempty"`
	// The id of the proposed contract.
	ProposedContractInputHash *Hash `protobuf:"bytes,4,opt,name=proposed_contract_input_hash,json=proposedContractInputHash,proto3" json:"proposed_contract_input_hash,omitempty"`
	// The category of contract code(0: C#).
	Category int32 `protobuf:"zigzag32,5,opt,name=category,proto3" json:"category,omitempty"`
	// Indicates if the contract is the system contract.
	IsSystemContract bool `protobuf:"varint,6,opt,name=is_system_contract,json=isSystemContract,proto3" json:"is_system_contract,omitempty"`
}

func (x *ContractCodeCheckInput) Reset() {
	*x = ContractCodeCheckInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCodeCheckInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCodeCheckInput) ProtoMessage() {}

func (x *ContractCodeCheckInput) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCodeCheckInput.ProtoReflect.Descriptor instead.
func (*ContractCodeCheckInput) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{4}
}

func (x *ContractCodeCheckInput) GetContractInput() []byte {
	if x != nil {
		return x.ContractInput
	}
	return nil
}

func (x *ContractCodeCheckInput) GetIsContractDeployment() bool {
	if x != nil {
		return x.IsContractDeployment
	}
	return false
}

func (x *ContractCodeCheckInput) GetCodeCheckReleaseMethod() string {
	if x != nil {
		return x.CodeCheckReleaseMethod
	}
	return ""
}

func (x *ContractCodeCheckInput) GetProposedContractInputHash() *Hash {
	if x != nil {
		return x.ProposedContractInputHash
	}
	return nil
}

func (x *ContractCodeCheckInput) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ContractCodeCheckInput) GetIsSystemContract() bool {
	if x != nil {
		return x.IsSystemContract
	}
	return false
}

type ContractProposed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the proposed contract.
	ProposedContractInputHash *Hash `protobuf:"bytes,1,opt,name=proposed_contract_input_hash,json=proposedContractInputHash,proto3" json:"proposed_contract_input_hash,omitempty"`
}

func (x *ContractProposed) Reset() {
	*x = ContractProposed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractProposed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractProposed) ProtoMessage() {}

func (x *ContractProposed) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractProposed.ProtoReflect.Descriptor instead.
func (*ContractProposed) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{5}
}

func (x *ContractProposed) GetProposedContractInputHash() *Hash {
	if x != nil {
		return x.ProposedContractInputHash
	}
	return nil
}

type ContractDeployed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The author of the contract, this is the person who deployed the contract.
	Author *Address `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	// The hash of the contract code.
	CodeHash *Hash `protobuf:"bytes,2,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	// The address of the contract.
	Address *Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The version of the current contract.
	Version int32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// The name of the contract. It has to be unique.
	Name            *Hash  `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	ContractVersion string `protobuf:"bytes,6,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
}

func (x *ContractDeployed) Reset() {
	*x = ContractDeployed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractDeployed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDeployed) ProtoMessage() {}

func (x *ContractDeployed) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDeployed.ProtoReflect.Descriptor instead.
func (*ContractDeployed) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{6}
}

func (x *ContractDeployed) GetAuthor() *Address {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ContractDeployed) GetCodeHash() *Hash {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *ContractDeployed) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ContractDeployed) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ContractDeployed) GetName() *Hash {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ContractDeployed) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

type CodeCheckRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The byte array of the contract code.
	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The id of the proposed contract.
	ProposedContractInputHash *Hash `protobuf:"bytes,2,opt,name=proposed_contract_input_hash,json=proposedContractInputHash,proto3" json:"proposed_contract_input_hash,omitempty"`
	// The category of contract code(0: C#).
	Category int32 `protobuf:"zigzag32,3,opt,name=category,proto3" json:"category,omitempty"`
	// Indicates if the contract is the system contract.
	IsSystemContract bool `protobuf:"varint,4,opt,name=is_system_contract,json=isSystemContract,proto3" json:"is_system_contract,omitempty"`
	// Indicates if the contract is the user contract.
	IsUserContract bool `protobuf:"varint,5,opt,name=is_user_contract,json=isUserContract,proto3" json:"is_user_contract,omitempty"`
}

func (x *CodeCheckRequired) Reset() {
	*x = CodeCheckRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeCheckRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeCheckRequired) ProtoMessage() {}

func (x *CodeCheckRequired) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeCheckRequired.ProtoReflect.Descriptor instead.
func (*CodeCheckRequired) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{7}
}

func (x *CodeCheckRequired) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *CodeCheckRequired) GetProposedContractInputHash() *Hash {
	if x != nil {
		return x.ProposedContractInputHash
	}
	return nil
}

func (x *CodeCheckRequired) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *CodeCheckRequired) GetIsSystemContract() bool {
	if x != nil {
		return x.IsSystemContract
	}
	return false
}

func (x *CodeCheckRequired) GetIsUserContract() bool {
	if x != nil {
		return x.IsUserContract
	}
	return false
}

type CodeUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the updated contract.
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The byte array of the old contract code.
	OldCodeHash *Hash `protobuf:"bytes,2,opt,name=old_code_hash,json=oldCodeHash,proto3" json:"old_code_hash,omitempty"`
	// The byte array of the new contract code.
	NewCodeHash *Hash `protobuf:"bytes,3,opt,name=new_code_hash,json=newCodeHash,proto3" json:"new_code_hash,omitempty"`
	// The version of the current contract.
	Version         int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ContractVersion string `protobuf:"bytes,5,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
}

func (x *CodeUpdated) Reset() {
	*x = CodeUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeUpdated) ProtoMessage() {}

func (x *CodeUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeUpdated.ProtoReflect.Descriptor instead.
func (*CodeUpdated) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{8}
}

func (x *CodeUpdated) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CodeUpdated) GetOldCodeHash() *Hash {
	if x != nil {
		return x.OldCodeHash
	}
	return nil
}

func (x *CodeUpdated) GetNewCodeHash() *Hash {
	if x != nil {
		return x.NewCodeHash
	}
	return nil
}

func (x *CodeUpdated) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CodeUpdated) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

type AuthorUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the contract.
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The old author of the contract.
	OldAuthor *Address `protobuf:"bytes,2,opt,name=old_author,json=oldAuthor,proto3" json:"old_author,omitempty"`
	// The new author of the contract.
	NewAuthor *Address `protobuf:"bytes,3,opt,name=new_author,json=newAuthor,proto3" json:"new_author,omitempty"`
}

func (x *AuthorUpdated) Reset() {
	*x = AuthorUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorUpdated) ProtoMessage() {}

func (x *AuthorUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorUpdated.ProtoReflect.Descriptor instead.
func (*AuthorUpdated) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{9}
}

func (x *AuthorUpdated) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AuthorUpdated) GetOldAuthor() *Address {
	if x != nil {
		return x.OldAuthor
	}
	return nil
}

func (x *AuthorUpdated) GetNewAuthor() *Address {
	if x != nil {
		return x.NewAuthor
	}
	return nil
}

type ValidateSystemContractAddressInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name hash of the contract.
	SystemContractHashName *Hash `protobuf:"bytes,1,opt,name=system_contract_hash_name,json=systemContractHashName,proto3" json:"system_contract_hash_name,omitempty"`
	// The address of the contract.
	Address *Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ValidateSystemContractAddressInput) Reset() {
	*x = ValidateSystemContractAddressInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSystemContractAddressInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSystemContractAddressInput) ProtoMessage() {}

func (x *ValidateSystemContractAddressInput) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSystemContractAddressInput.ProtoReflect.Descriptor instead.
func (*ValidateSystemContractAddressInput) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{10}
}

func (x *ValidateSystemContractAddressInput) GetSystemContractHashName() *Hash {
	if x != nil {
		return x.SystemContractHashName
	}
	return nil
}

func (x *ValidateSystemContractAddressInput) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type ReleaseContractInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the proposal.
	ProposalId *Hash `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// The id of the proposed contract.
	ProposedContractInputHash *Hash `protobuf:"bytes,2,opt,name=proposed_contract_input_hash,json=proposedContractInputHash,proto3" json:"proposed_contract_input_hash,omitempty"`
}

func (x *ReleaseContractInput) Reset() {
	*x = ReleaseContractInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseContractInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseContractInput) ProtoMessage() {}

func (x *ReleaseContractInput) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseContractInput.ProtoReflect.Descriptor instead.
func (*ReleaseContractInput) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseContractInput) GetProposalId() *Hash {
	if x != nil {
		return x.ProposalId
	}
	return nil
}

func (x *ReleaseContractInput) GetProposedContractInputHash() *Hash {
	if x != nil {
		return x.ProposedContractInputHash
	}
	return nil
}

type ContractCodeHashList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*Hash `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ContractCodeHashList) Reset() {
	*x = ContractCodeHashList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCodeHashList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCodeHashList) ProtoMessage() {}

func (x *ContractCodeHashList) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCodeHashList.ProtoReflect.Descriptor instead.
func (*ContractCodeHashList) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{12}
}

func (x *ContractCodeHashList) GetValue() []*Hash {
	if x != nil {
		return x.Value
	}
	return nil
}

type ContractCodeHashMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[int64]*ContractCodeHashList `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ContractCodeHashMap) Reset() {
	*x = ContractCodeHashMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCodeHashMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCodeHashMap) ProtoMessage() {}

func (x *ContractCodeHashMap) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCodeHashMap.ProtoReflect.Descriptor instead.
func (*ContractCodeHashMap) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{13}
}

func (x *ContractCodeHashMap) GetValue() map[int64]*ContractCodeHashList {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetContractAuthorInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress *Address `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	NewAuthor       *Address `protobuf:"bytes,2,opt,name=new_author,json=newAuthor,proto3" json:"new_author,omitempty"`
}

func (x *SetContractAuthorInput) Reset() {
	*x = SetContractAuthorInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetContractAuthorInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetContractAuthorInput) ProtoMessage() {}

func (x *SetContractAuthorInput) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetContractAuthorInput.ProtoReflect.Descriptor instead.
func (*SetContractAuthorInput) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{14}
}

func (x *SetContractAuthorInput) GetContractAddress() *Address {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *SetContractAuthorInput) GetNewAuthor() *Address {
	if x != nil {
		return x.NewAuthor
	}
	return nil
}

type DeployUserSmartContractOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeHash *Hash `protobuf:"bytes,1,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
}

func (x *DeployUserSmartContractOutput) Reset() {
	*x = DeployUserSmartContractOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployUserSmartContractOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployUserSmartContractOutput) ProtoMessage() {}

func (x *DeployUserSmartContractOutput) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployUserSmartContractOutput.ProtoReflect.Descriptor instead.
func (*DeployUserSmartContractOutput) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{15}
}

func (x *DeployUserSmartContractOutput) GetCodeHash() *Hash {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

type SystemContractDeploymentInput_SystemTransactionMethodCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The method name of system transaction.
	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// The params of system transaction method.
	Params []byte `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCall) Reset() {
	*x = SystemContractDeploymentInput_SystemTransactionMethodCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemContractDeploymentInput_SystemTransactionMethodCall) ProtoMessage() {}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCall) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemContractDeploymentInput_SystemTransactionMethodCall.ProtoReflect.Descriptor instead.
func (*SystemContractDeploymentInput_SystemTransactionMethodCall) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCall) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCall) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

type SystemContractDeploymentInput_SystemTransactionMethodCallList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of system transactions.
	Value []*SystemContractDeploymentInput_SystemTransactionMethodCall `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCallList) Reset() {
	*x = SystemContractDeploymentInput_SystemTransactionMethodCallList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acs0_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCallList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemContractDeploymentInput_SystemTransactionMethodCallList) ProtoMessage() {}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCallList) ProtoReflect() protoreflect.Message {
	mi := &file_acs0_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemContractDeploymentInput_SystemTransactionMethodCallList.ProtoReflect.Descriptor instead.
func (*SystemContractDeploymentInput_SystemTransactionMethodCallList) Descriptor() ([]byte, []int) {
	return file_acs0_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SystemContractDeploymentInput_SystemTransactionMethodCallList) GetValue() []*SystemContractDeploymentInput_SystemTransactionMethodCall {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_acs0_proto protoreflect.FileDescriptor

var file_acs0_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x63, 0x73, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x1a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x49, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcc, 0x03, 0x0a, 0x1d, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x56, 0x0a, 0x1b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x7a, 0x0a, 0x1f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4b, 0x0a, 0x1c,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x19,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x22, 0x5f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x84, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x05, 0x88, 0x8f, 0xf5, 0x01, 0x01, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c,
	0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x05, 0x88, 0x8f, 0xf5, 0x01, 0x01, 0x52, 0x08, 0x63,
	0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x04, 0xa0, 0xbb, 0x18, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65,
	0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x04, 0xa0, 0xbb, 0x18, 0x01, 0x22, 0xe8, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x05, 0x88, 0x8f,
	0xf5, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x0d,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x0b, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x0d,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x04, 0xa0, 0xbb, 0x18, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c,
	0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x05, 0x88, 0x8f, 0xf5, 0x01, 0x01,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x6f, 0x6c, 0x64,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x6f, 0x6c,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65,
	0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x04, 0xa0, 0xbb, 0x18, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x22,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x45, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c,
	0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x38, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xab, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x4d, 0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x56, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x22, 0x48, 0x0a, 0x1d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x32, 0xad, 0x0f, 0x0a, 0x04, 0x41,
	0x43, 0x53, 0x30, 0x12, 0x53, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x25, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0a, 0x2e,
	0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x18, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1b,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x65,
	0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x17, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x1a,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x17, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x20, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x1e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x05, 0x88, 0x89, 0xf7, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x05, 0x88, 0x89, 0xf7, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x05, 0x88, 0x89, 0xf7, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x05, 0x88, 0x89, 0xf7, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x05, 0x88, 0x89, 0xf7, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x0d, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x1f, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x05, 0x88, 0x89, 0xf7, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x0a, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a,
	0x1f, 0x2e, 0x61, 0x65, 0x6c, 0x66, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x05, 0x88, 0x89, 0xf7, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x05, 0x88, 0x89, 0xf7, 0x01, 0x01, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_acs0_proto_rawDescOnce sync.Once
	file_acs0_proto_rawDescData = file_acs0_proto_rawDesc
)

func file_acs0_proto_rawDescGZIP() []byte {
	file_acs0_proto_rawDescOnce.Do(func() {
		file_acs0_proto_rawDescData = protoimpl.X.CompressGZIP(file_acs0_proto_rawDescData)
	})
	return file_acs0_proto_rawDescData
}

var file_acs0_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_acs0_proto_goTypes = []interface{}{
	(*ContractInfo)(nil),                                                  // 0: client.ContractInfo
	(*ContractDeploymentInput)(nil),                                       // 1: client.ContractDeploymentInput
	(*SystemContractDeploymentInput)(nil),                                 // 2: client.SystemContractDeploymentInput
	(*ContractUpdateInput)(nil),                                           // 3: client.ContractUpdateInput
	(*ContractCodeCheckInput)(nil),                                        // 4: client.ContractCodeCheckInput
	(*ContractProposed)(nil),                                              // 5: client.ContractProposed
	(*ContractDeployed)(nil),                                              // 6: client.ContractDeployed
	(*CodeCheckRequired)(nil),                                             // 7: client.CodeCheckRequired
	(*CodeUpdated)(nil),                                                   // 8: client.CodeUpdated
	(*AuthorUpdated)(nil),                                                 // 9: client.AuthorUpdated
	(*ValidateSystemContractAddressInput)(nil),                            // 10: client.ValidateSystemContractAddressInput
	(*ReleaseContractInput)(nil),                                          // 11: client.ReleaseContractInput
	(*ContractCodeHashList)(nil),                                          // 12: client.ContractCodeHashList
	(*ContractCodeHashMap)(nil),                                           // 13: client.ContractCodeHashMap
	(*SetContractAuthorInput)(nil),                                        // 14: client.SetContractAuthorInput
	(*DeployUserSmartContractOutput)(nil),                                 // 15: client.DeployUserSmartContractOutput
	(*SystemContractDeploymentInput_SystemTransactionMethodCall)(nil),     // 16: client.SystemContractDeploymentInput.SystemTransactionMethodCall
	(*SystemContractDeploymentInput_SystemTransactionMethodCallList)(nil), // 17: client.SystemContractDeploymentInput.SystemTransactionMethodCallList
	nil,                               // 18: client.ContractCodeHashMap.ValueEntry
	(*Address)(nil),                   // 19: aelf.Address
	(*Hash)(nil),                      // 20: aelf.Hash
	(*wrapperspb.BoolValue)(nil),      // 21: google.protobuf.BoolValue
	(*emptypb.Empty)(nil),             // 22: google.protobuf.Empty
	(*wrapperspb.Int64Value)(nil),     // 23: google.protobuf.Int64Value
	(*SmartContractRegistration)(nil), // 24: aelf.SmartContractRegistration
}
var file_acs0_proto_depIdxs = []int32{
	19, // 0: client.ContractInfo.author:type_name -> aelf.Address
	20, // 1: client.ContractInfo.code_hash:type_name -> aelf.Hash
	20, // 2: client.SystemContractDeploymentInput.name:type_name -> aelf.Hash
	17, // 3: client.SystemContractDeploymentInput.transaction_method_call_list:type_name -> client.SystemContractDeploymentInput.SystemTransactionMethodCallList
	19, // 4: client.ContractUpdateInput.address:type_name -> aelf.Address
	20, // 5: client.ContractCodeCheckInput.proposed_contract_input_hash:type_name -> aelf.Hash
	20, // 6: client.ContractProposed.proposed_contract_input_hash:type_name -> aelf.Hash
	19, // 7: client.ContractDeployed.author:type_name -> aelf.Address
	20, // 8: client.ContractDeployed.code_hash:type_name -> aelf.Hash
	19, // 9: client.ContractDeployed.address:type_name -> aelf.Address
	20, // 10: client.ContractDeployed.Name:type_name -> aelf.Hash
	20, // 11: client.CodeCheckRequired.proposed_contract_input_hash:type_name -> aelf.Hash
	19, // 12: client.CodeUpdated.address:type_name -> aelf.Address
	20, // 13: client.CodeUpdated.old_code_hash:type_name -> aelf.Hash
	20, // 14: client.CodeUpdated.new_code_hash:type_name -> aelf.Hash
	19, // 15: client.AuthorUpdated.address:type_name -> aelf.Address
	19, // 16: client.AuthorUpdated.old_author:type_name -> aelf.Address
	19, // 17: client.AuthorUpdated.new_author:type_name -> aelf.Address
	20, // 18: client.ValidateSystemContractAddressInput.system_contract_hash_name:type_name -> aelf.Hash
	19, // 19: client.ValidateSystemContractAddressInput.address:type_name -> aelf.Address
	20, // 20: client.ReleaseContractInput.proposal_id:type_name -> aelf.Hash
	20, // 21: client.ReleaseContractInput.proposed_contract_input_hash:type_name -> aelf.Hash
	20, // 22: client.ContractCodeHashList.value:type_name -> aelf.Hash
	18, // 23: client.ContractCodeHashMap.value:type_name -> client.ContractCodeHashMap.ValueEntry
	19, // 24: client.SetContractAuthorInput.contract_address:type_name -> aelf.Address
	19, // 25: client.SetContractAuthorInput.new_author:type_name -> aelf.Address
	20, // 26: client.DeployUserSmartContractOutput.code_hash:type_name -> aelf.Hash
	16, // 27: client.SystemContractDeploymentInput.SystemTransactionMethodCallList.value:type_name -> client.SystemContractDeploymentInput.SystemTransactionMethodCall
	12, // 28: client.ContractCodeHashMap.ValueEntry.value:type_name -> client.ContractCodeHashList
	2,  // 29: client.ACS0.DeploySystemSmartContract:input_type -> client.SystemContractDeploymentInput
	1,  // 30: client.ACS0.DeploySmartContract:input_type -> client.ContractDeploymentInput
	3,  // 31: client.ACS0.UpdateSmartContract:input_type -> client.ContractUpdateInput
	1,  // 32: client.ACS0.ProposeNewContract:input_type -> client.ContractDeploymentInput
	4,  // 33: client.ACS0.ProposeContractCodeCheck:input_type -> client.ContractCodeCheckInput
	3,  // 34: client.ACS0.ProposeUpdateContract:input_type -> client.ContractUpdateInput
	11, // 35: client.ACS0.ReleaseApprovedContract:input_type -> client.ReleaseContractInput
	11, // 36: client.ACS0.ReleaseCodeCheckedContract:input_type -> client.ReleaseContractInput
	1,  // 37: client.ACS0.DeployUserSmartContract:input_type -> client.ContractDeploymentInput
	3,  // 38: client.ACS0.UpdateUserSmartContract:input_type -> client.ContractUpdateInput
	11, // 39: client.ACS0.ReleaseApprovedUserSmartContract:input_type -> client.ReleaseContractInput
	1,  // 40: client.ACS0.PerformDeployUserSmartContract:input_type -> client.ContractDeploymentInput
	3,  // 41: client.ACS0.PerformUpdateUserSmartContract:input_type -> client.ContractUpdateInput
	14, // 42: client.ACS0.SetContractAuthor:input_type -> client.SetContractAuthorInput
	10, // 43: client.ACS0.ValidateSystemContractAddress:input_type -> client.ValidateSystemContractAddressInput
	21, // 44: client.ACS0.SetContractProposerRequiredState:input_type -> google.protobuf.BoolValue
	22, // 45: client.ACS0.CurrentContractSerialNumber:input_type -> google.protobuf.Empty
	19, // 46: client.ACS0.GetContractInfo:input_type -> aelf.Address
	19, // 47: client.ACS0.GetContractAuthor:input_type -> aelf.Address
	19, // 48: client.ACS0.GetContractHash:input_type -> aelf.Address
	20, // 49: client.ACS0.GetContractAddressByName:input_type -> aelf.Hash
	19, // 50: client.ACS0.GetSmartContractRegistrationByAddress:input_type -> aelf.Address
	20, // 51: client.ACS0.GetSmartContractRegistrationByCodeHash:input_type -> aelf.Hash
	23, // 52: client.ACS0.GetContractCodeHashListByDeployingBlockHeight:input_type -> google.protobuf.Int64Value
	19, // 53: client.ACS0.DeploySystemSmartContract:output_type -> aelf.Address
	19, // 54: client.ACS0.DeploySmartContract:output_type -> aelf.Address
	19, // 55: client.ACS0.UpdateSmartContract:output_type -> aelf.Address
	20, // 56: client.ACS0.ProposeNewContract:output_type -> aelf.Hash
	20, // 57: client.ACS0.ProposeContractCodeCheck:output_type -> aelf.Hash
	20, // 58: client.ACS0.ProposeUpdateContract:output_type -> aelf.Hash
	22, // 59: client.ACS0.ReleaseApprovedContract:output_type -> google.protobuf.Empty
	22, // 60: client.ACS0.ReleaseCodeCheckedContract:output_type -> google.protobuf.Empty
	15, // 61: client.ACS0.DeployUserSmartContract:output_type -> client.DeployUserSmartContractOutput
	22, // 62: client.ACS0.UpdateUserSmartContract:output_type -> google.protobuf.Empty
	22, // 63: client.ACS0.ReleaseApprovedUserSmartContract:output_type -> google.protobuf.Empty
	19, // 64: client.ACS0.PerformDeployUserSmartContract:output_type -> aelf.Address
	22, // 65: client.ACS0.PerformUpdateUserSmartContract:output_type -> google.protobuf.Empty
	22, // 66: client.ACS0.SetContractAuthor:output_type -> google.protobuf.Empty
	22, // 67: client.ACS0.ValidateSystemContractAddress:output_type -> google.protobuf.Empty
	22, // 68: client.ACS0.SetContractProposerRequiredState:output_type -> google.protobuf.Empty
	23, // 69: client.ACS0.CurrentContractSerialNumber:output_type -> google.protobuf.Int64Value
	0,  // 70: client.ACS0.GetContractInfo:output_type -> client.ContractInfo
	19, // 71: client.ACS0.GetContractAuthor:output_type -> aelf.Address
	20, // 72: client.ACS0.GetContractHash:output_type -> aelf.Hash
	19, // 73: client.ACS0.GetContractAddressByName:output_type -> aelf.Address
	24, // 74: client.ACS0.GetSmartContractRegistrationByAddress:output_type -> aelf.SmartContractRegistration
	24, // 75: client.ACS0.GetSmartContractRegistrationByCodeHash:output_type -> aelf.SmartContractRegistration
	12, // 76: client.ACS0.GetContractCodeHashListByDeployingBlockHeight:output_type -> client.ContractCodeHashList
	53, // [53:77] is the sub-list for method output_type
	29, // [29:53] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_acs0_proto_init() }
func file_acs0_proto_init() {
	if File_acs0_proto != nil {
		return
	}
	file_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_acs0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractDeploymentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemContractDeploymentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractUpdateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCodeCheckInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractProposed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractDeployed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeCheckRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSystemContractAddressInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseContractInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCodeHashList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCodeHashMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetContractAuthorInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployUserSmartContractOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemContractDeploymentInput_SystemTransactionMethodCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acs0_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemContractDeploymentInput_SystemTransactionMethodCallList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_acs0_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_acs0_proto_goTypes,
		DependencyIndexes: file_acs0_proto_depIdxs,
		MessageInfos:      file_acs0_proto_msgTypes,
	}.Build()
	File_acs0_proto = out.File
	file_acs0_proto_rawDesc = nil
	file_acs0_proto_goTypes = nil
	file_acs0_proto_depIdxs = nil
}
